@page "/"
@using TobesMediaCore.Data.Media;
@using TobesMediaCore.Network;
@using System.Net.Http
@using System.Timers;
@inject HttpClient Http
@inject IJSRuntime  JSRuntime;

<Banner></Banner>
@*<h3>Movies</h3>
<input @bind="SearchTerm" />
@if (movies.List.Count == 0)
{
    <p>Loading...</p>
}
else if (!m_isPlaying)
{
<table>
    @foreach (MediaBase movie in movies.List)
    {
        <tr>@movie.Name</tr>
        <tr><progress value="@movie.Progress" max="100"></progress></tr>
        @if (!movie.IsDownloaded)
        {
            <tr><input type="image" src=@movie.PosterURL @onclick="(() => DownloadMovie(movie))" /></tr>
        }
        else if (!movie.IsDownloading)
        {
            <tr><input type="image" src=@movie.PosterURL @onclick="(() => PlayMovie(movie))" /></tr>
        }
    }
</table>
}*@

@code {
    private string m_searchTerm;
    private string SearchTerm { get { return m_searchTerm; } set { m_searchTerm = value; LoadMoviesByName(); } }
    private bool m_isPlaying;
    private string m_videoURL;
    MediaBaseList movies = new MediaBaseList();
    ElementReference playerRef;

    private System.Timers.Timer m_timer = new System.Timers.Timer();

    //protected override void OnInitialized()
    //{
    //    LoadMovies();
    //    m_timer = new System.Timers.Timer();
    //    m_timer.Elapsed += UpdateData;
    //    m_timer.Interval = 1000; // in miliseconds
    //    m_timer.AutoReset = true;
    //    m_timer.Enabled = true;
    //}

    private void UpdateData(object sender, ElapsedEventArgs e)
    {
        foreach (MediaBase movie in movies.List)
        {
            movie.UpdateProgress(Http);
            if (movie.IsDownloading)
                StateHasChanged();
        }
    }

    private async void DownloadMovie(MediaBase mediaBase)
    {
        await mediaBase.DownloadMovie(Http);
    }

    private void PlayMovie(MediaBase mediaBase)
    {
        m_isPlaying = true;
        m_videoURL = "https://localhost:5001/api/media/play/movie/" + mediaBase.ID;
        UpdateVideo(m_videoURL);
    }

    private void UpdateSearch()
    {
        LoadMoviesByName();
    }

    private async void LoadMovies()
    {
        MediaBase movie = new MediaBase();
        await movie.LoadMovieAsync("tt3896198", Http);
        Console.WriteLine(movie.ID);
        movies.List.Add(movie);
        StateHasChanged();
    }

    private void UpdateVideo(string source)
    {
        (JSRuntime as IJSInProcessRuntime).InvokeVoid("toggleVideo", source);
    }

    private async void LoadMoviesByName()
    {
        movies.List.Clear();
        await movies.LoadMoviesByName(SearchTerm, Http);
        StateHasChanged();
    }
}