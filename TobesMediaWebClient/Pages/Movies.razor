@page "/"
@using TobesMediaCore.Data.Media;
@using TobesMediaCore.Network;
@using System.Net.Http
@using System.Timers;
@inject HttpClient Http
@inject IJSRuntime  JSRuntime;

@layout Banner

@if (!m_isPlaying)
{
        @foreach (MediaBase movie in movies.List)
        {
            <div class="flex-initial col border-4 border-red-900 w-1/6">
                @if (!movie.IsDownloaded)
                {
                    <img class="border-8 border-blue-900 object-contain" src=@movie.PosterURL @onclick="() => DownloadMovie(movie)"/>
                }
                else if (!movie.IsDownloading)
                {
                    <img class="border-8 border-blue-900 object-contain" src=@movie.PosterURL/>
                }
                <progress class="w-full" value="@movie.Progress" max="100"></progress>
            </div>
        }
}

@code {
    private string m_searchTerm = string.Empty;
    [CascadingParameter] private string SearchTerm { get { return m_searchTerm; } set { m_searchTerm = value; LoadMoviesByName(); } }
    private bool m_isPlaying;
    private string m_videoURL;
    MediaBaseList movies = new MediaBaseList();

    private System.Timers.Timer m_timer = new System.Timers.Timer();

    protected override void OnInitialized()
    {
        LoadMovies();
        m_timer = new System.Timers.Timer();
        m_timer.Elapsed += UpdateData;
        m_timer.Interval = 1000; // in miliseconds
        m_timer.AutoReset = true;
        m_timer.Enabled = true;
    }

    private void UpdateData(object sender, ElapsedEventArgs e)
    {
        foreach (MediaBase movie in movies.List)
        {
            movie.UpdateProgress(Http);
            if (movie.IsDownloading)
                StateHasChanged();
        }
    }

    private async void DownloadMovie(MediaBase mediaBase)
    {
        await mediaBase.DownloadMovie(Http);
    }

    private void PlayMovie(MediaBase mediaBase)
    {
        m_isPlaying = true;
        m_videoURL = "https://localhost:5001/api/media/play/movie/" + mediaBase.ID;
        UpdateVideo(m_videoURL);
    }

    private void UpdateSearch()
    {
        if (m_searchTerm == string.Empty)
            return;
        LoadMoviesByName();
    }

    private async void LoadMovies()
    {
        MediaBase movie = new MediaBase();
        await movie.LoadMovieAsync("tt3896198", Http);
        Console.WriteLine(movie.ID);
        movies.List.Add(movie);
        StateHasChanged();
    }

    private void UpdateVideo(string source)
    {
        (JSRuntime as IJSInProcessRuntime).InvokeVoid("toggleVideo", source);
    }

    private async void LoadMoviesByName()
    {
        movies.List.Clear();
        await movies.LoadMoviesByName(SearchTerm, Http);
        StateHasChanged();
    }
}